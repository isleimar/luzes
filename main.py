from luzes import Luzes
from random import randint
from matriz_resolver import MatrizResolver
import json
from os.path import isfile
largura = 5
altura = 5

nome_arquivo = "db.json"

l = Luzes(largura, altura)
matrizes ={
    0:[
        [0,0,0,0,1],
        [0,0,0,1,1],
        [0,0,0,0,1],
        [0,0,0,0,0],
        [0,0,0,0,0],
    ],
    1:[
        [0,0,0,0,0],
        [0,0,0,0,0],
        [0,0,0,0,0],
        [1,0,0,0,1],
        [1,1,0,1,1],
    ],
    2:[
        [1,1,0,1,1],
        [0,1,1,1,0],
        [0,1,1,1,0],
        [0,0,1,0,0],
        [0,0,0,0,0],
    ],
    3:[
        [0,1,0,0,0],
        [1,1,0,0,0],
        [0,1,1,1,0],
        [1,1,0,0,0],
        [0,1,0,0,0],
    ],
    4:[
        [1,0,0,0,1],
        [0,1,0,1,0],
        [0,1,0,1,0],
        [0,0,0,0,0],
        [0,0,0,0,0],
    ],
    5:[
        [1,1,1,0,0],
        [1,1,1,0,0],
        [1,0,1,1,0],
        [1,1,1,0,0],
        [1,1,1,0,0],
    ],
    6:[
        [1,1,0,0,0],
        [0,0,1,1,0],
        [0,0,1,0,0],
        [0,1,0,1,0],
        [1,1,0,1,1],
    ],
    7:[
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,1,1,0],
        [0,0,1,0,0],
        [0,0,1,0,0],
    ],
    8:[
        [1,0,0,1,1],
        [0,1,1,1,1],
        [0,0,0,0,1],
        [0,0,1,1,0],
        [0,1,0,0,1],
    ],
    9:[
        [0,0,0,0,0],
        [0,1,1,1,0],
        [0,0,1,0,0],
        [1,0,1,0,1],
        [1,0,0,0,1],
    ],
    10:[
        [1,0,0,0,1],
        [0,1,0,1,0],
        [0,1,0,1,0],
        [0,1,0,0,0],
        [1,1,1,0,0],
    ],
    11:[
        [1,0,1,0,1],
        [1,1,1,0,1],
        [1,1,0,1,0],
        [1,0,1,0,0],
        [1,0,1,0,0],
    ],
    12:[
        [1,1,1,1,0],
        [0,0,1,0,1],
        [1,0,0,0,1],
        [1,0,1,0,0],
        [0,1,1,1,1],
    ],
    13:[
        [0,1,0,1,0],
        [1,0,0,0,1],
        [1,1,0,1,1],
        [1,0,0,0,1],
        [0,1,0,1,0],
    ],
    14:[
        [1,1,0,0,1],
        [1,1,1,1,0],
        [0,0,0,0,0],
        [1,1,1,1,0],
        [1,1,0,0,1],
    ],
    15:[
        [1,1,0,1,1],
        [0,0,0,0,0],
        [1,0,0,0,1],
        [1,1,0,1,1],
        [0,1,0,1,0],
    ],
    16:[
        [1,0,0,0,1],
        [1,0,0,0,1],
        [0,1,0,1,0],
        [0,0,0,0,0],
        [1,1,0,1,1],
    ],
    100:[
        [0,0,1,1,0],
        [0,1,1,0,0],
        [0,0,0,0,0],
        [0,1,1,0,0],
        [0,0,1,1,0],
    ],
    101:[
        [0,1,1,1,0],
        [1,0,1,0,1],
        [1,1,1,0,0],
        [1,0,1,0,1],
        [0,1,1,1,0],
    ],
    102:[
        [1,1,0,1,1],
        [0,0,1,0,0],
        [1,1,0,0,0],
        [0,0,1,0,0],
        [1,1,0,1,1],
    ]
}
mr = MatrizResolver(largura, altura)

def abrir():
    global mr, nome_arquivo
    if not isfile(nome_arquivo):
        return
    with open(nome_arquivo) as f:
        d = json.load(f)
        for k, v in d.items():
            mr.dados[int(k)] = v 

def aprender():
    global l, mr, nome_arquivo    
    for i in range(100):
        mr.aprender()
        with open(nome_arquivo,"w") as a:
            json.dump(mr.dados, a)
        print(len(mr.dados))        

def main():
    global l, mr, matrizes
    abrir()
    for n, matriz in matrizes.items():
        l.matriz = matriz
        s = mr.solucao(l)
        print(n)
        print(l)
        for m in s:
            l.clicar(m)
        print(l)
        print(s)        
    # aprender()    

if __name__ == "__main__":
    main()

